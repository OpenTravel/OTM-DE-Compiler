---
#
# Copyright (C) 2014 OpenTravel Alliance (info@opentravel.org)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
- name: --> Install and Configure Nagios-Core Server for OTM Repository Monitoring
  hosts: "{{ target | default('localhost') }}"
  vars_files:
    - vars/default-vars.yml
    - vars/otm-repository-vars.yml
  tasks:
  - import_tasks: subtasks/validate.yml
  - import_tasks: subtasks/discover-system-facts.yml
  
  - name: --> Check for Existing Nagios-Core installation
    stat: 
      path: "/usr/local/nagios"
    register: nagios_status
  
  - name: --> Exit if Nagios-Core is already installed
    block:
    - debug:
        msg: "Nagios-Core appears to be installed already - Exiting..."
    - meta: end_play
    when: nagios_status.stat.exists == true
  
  - name: --> Download Artifacts to Controller
    block:
    - name: Creating local temp directory
      file:
        path: "{{controller_temp_dir}}"
        state: directory
      delegate_to: localhost
    - name: Download artifacts that will need to be uploaded later
      get_url:
        url: "{{item.url}}"
        dest: "{{controller_temp_dir}}/{{item.file}}"
        validate_certs: false
      with_items:
        - { url: "{{nagioscore_download_url}}", file: "{{nagioscore_archive}}.tar.gz" }
        - { url: "{{nagiosplugins_download_url}}", file: "{{nagiosplugins_archive}}.tar.gz" }
        - { url: "{{nagiosnrpe_download_url}}", file: "{{nagiosnrpe_archive}}.tar.gz" }
        - { url: "{{nagiosnrpe_download_url}}", file: "{{nagiosnrpe_archive}}.tar.gz" }
        - { url: "{{jmxplugin_download_url}}", file: "{{jmxplugin_archive}}.zip" }
      delegate_to: localhost
  
  - name: --> Install Required Packages
    block:
    - name: Setup OS-specific configuration (CentOS)
      package:
        name:
          - gcc
          - glibc
          - glibc-common
          - wget
          - unzip
          - httpd
          - php
          - gd
          - gd-devel
          - perl
          - postfix
          - java-1.8.0-openjdk-devel
        state: latest
      when: os_is_centos
    - name: Setup OS-specific configuration (RHEL)
      block:
      - name: Enable optional server packages (RHEL)
        command: "subscription-manager repos --enable rhel-{{os_major_version}}-server-optional-rpms"
      - name: Setup OS-specific configuration (RHEL)  
        package:
          name:
            - gcc
            - glibc
            - glibc-common
            - wget
            - unzip
            - httpd
            - php
            - gd
            - gd-devel
            - perl
            - postfix
            - java-1.8.0-openjdk-devel
          state: latest
      when: os_is_rhel
    - name: Setup OS-specific configuration (Debian)
      package:
        name:
          - autoconf
          - gcc
          - libc6
          - make
          - wget
          - unzip
          - apache2
          - apache2-utils
          - php
          - libgd-dev
          - iptables-persistent
          - openjdk-8-jdk
        state: latest
      when: os_is_debian
    - name: Setup OS-specific configuration (Ubuntu)
      package:
        name:
          - autoconf
          - gcc
          - libc6
          - make
          - wget
          - unzip
          - apache2
          - php
          - libapache2-mod-php
          - libgd-dev
          - openjdk-8-jdk
        state: latest
      when: os_is_ubuntu
    - name: Disable SELinux (if necessary)
      selinux:
        state: disabled
      when: selinux_installed

  - name: --> Install Nagios-Core Server
    block:
    - name: Upload Nagios-Core server archive to remote host
      unarchive:
        src: "{{controller_temp_dir}}/{{nagioscore_archive}}.tar.gz"
        dest: "/tmp"
    - name: Perform installation (Debian/Ubuntu)
      shell: |
        ./configure --with-httpd-conf=/etc/apache2/sites-enabled
        make all
        make install-groups-users
        usermod -a -G nagios www-data
        make install
        make install-daemoninit
        make install-commandmode
        make install-config
        make install-webconf
        a2enmod rewrite
        a2enmod cgi
        htpasswd -b -c /usr/local/nagios/etc/htpasswd.users nagiosadmin admin
      args:
        chdir: "/tmp/{{nagioscore_archive}}"
      when: os_is_debian or os_is_ubuntu
    - name: Perform installation (CentOS/RHEL)
      shell: |
        ./configure
        make all
        make install-groups-users
        usermod -a -G nagios apache
        make install
        make install-daemoninit
        make install-commandmode
        make install-config
        make install-webconf
        htpasswd -b -c /usr/local/nagios/etc/htpasswd.users nagiosadmin admin
      args:
        chdir: "/tmp/{{nagioscore_archive}}"
      when: os_is_centos or os_is_rhel

  - name: Install the Nagios check_jmx plugin
    block:
    - name: Upload check_jmx plugin archive to remote host
      unarchive:
        src: "{{controller_temp_dir}}/{{jmxplugin_archive}}.zip"
        dest: "/tmp"
    - name: Copy plugin files to the Nagios installation
      shell: |
        cp /tmp/{{jmxplugin_archive}}/check_jmx* /usr/local/nagios/libexec
        perl -pi -e 's/\r\n/\n/g' /usr/local/nagios/libexec/check_jmx
        chmod 755 /usr/local/nagios/libexec/check_jmx*
        
  - name: --> Configure Firewall Rules
    block:
    - name: Perform firewall configuration (firewalld)
      firewalld:
        port: 80/tcp
        permanent: yes
        immediate: true
        state: enabled
      when: firewalld_installed
    - name: Perform firewall configuration (ufw)
      ufw:
        rule: allow
        name: Apache
        state: enabled
      when: ufw_installed
    - name: Perform firewall configuration (iptables)
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "80"
        jump: ACCEPT
        action: insert
      when: iptables_installed
  
  - name: --> Restart Apache and Nagios Services
    block:
      - name: Restart the httpd service (CentOS/RHEL)
        service:
          name: httpd
          enabled: yes
          state: restarted
        when: os_is_centos or os_is_rhel
      - name: Restart the apache2 service (CentOS/RHEL)
        service:
          name: apache2
          enabled: yes
          state: restarted
        when: os_is_debian or os_is_ubuntu
      - name: Start the nagios service
        service:
          name: nagios
          enabled: yes
          state: started
      - name: Create an empty index.html file for monitoring purposes
        file:
          path: "/var/www/html/index.html"
          state: touch
  
  - import_tasks: subtasks/setup-nagios-plugins.yml
  - import_tasks: subtasks/setup-nagios-monitoring.yml
  