<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
	
	<bean id="developmentRepository" class="java.lang.Boolean" scope="singleton">
		<constructor-arg value="true" />
	</bean>
	
	<bean id="repositoryLocation" class="java.io.File" scope="singleton">
		<constructor-arg value="#{systemProperties['user.dir']}" />
		<constructor-arg value="/target/test-workspace/#{systemProperties['test.class']}/test-repository" />
	</bean>
	
	<bean id="svnRepositoryLocation" class="java.io.File" scope="singleton">
		<constructor-arg value="#{systemProperties['user.dir']}" />
		<constructor-arg value="/target/test-workspace/#{systemProperties['test.class']}/svn-repository" />
	</bean>
	
	<bean id="searchIndexLocation" class="java.io.File" scope="singleton">
		<constructor-arg value="#{systemProperties['user.dir']}" />
		<constructor-arg value="/target/test-workspace/#{systemProperties['test.class']}/search-index" />
	</bean>
	
	<!--
		Repository Manager:
		
		The repository manager handles the basic interactions with the locally-hosted OTA2.0 repository.  Using
		one of the options below, the repository manager can be configured for default handling of files or it
		can use a Subversion repository to maintain a persistent record of all files and changes that are performed
		by users of the repository web service.
	-->
	<bean id="repositoryManager" class="org.opentravel.schemacompiler.repository.RepositoryManager" scope="singleton">
		<!--
		 Uncomment for default repository file management.
		-->
		<!--
		<constructor-arg ref="repositoryLocation" />
		-->
		
		<!--
		 Uncomment for SVN persistence of repository files.
		-->
		<constructor-arg>
			<bean class="org.opentravel.repocommon.repository.SVNRepositoryFileManager">
				<constructor-arg ref="repositoryLocation" />
				<constructor-arg ref="svnConfigFolder" />
				<constructor-arg ref="svnCredentialsFile" />
			</bean>
		</constructor-arg>
	</bean>
	
	<!--
		Repository Security Manager:
		
		Provides all authentication and authorization services required for secure operation of the OTA2.0
		repository.
	-->
	<bean id="securityManager" class="org.opentravel.repocommon.security.impl.DefaultRepositorySecurityManager">
		<constructor-arg ref="repositoryManager" />
		<constructor-arg ref="authenticationProvider" />
		<constructor-arg ref="authorizationProvider" />
	</bean>
	
	<!--
		Authentication Provider: (Default - File Authentication)
		
		The authentication provider component handles the validation of user ID's and passwords for remote
		users of the OTA2.0 repository.  Supported implementations include locally-maintained user accounts
		or JNDI authentication using a corporate LDAP environment.
	-->
	<!--
	-->
	<bean id="authenticationProvider" class="org.opentravel.repocommon.security.impl.FileAuthenticationProvider">
		<property name="repositoryManager" ref="repositoryManager" />
	</bean>
	
	<!--
		Authentication Provider: (JNDI - Authentication Mode)
		
		Authentication provider that implements JNDI authentication using direct user authentication.  In this
		mode, each user's credentials are used to attempt a login to the remote directory server.  This approach
		is sometimes considered more secure because it does not require an LDAP administrator's password to be
		stored with the configuration settings of the repository.  In some cases, however, this mode is not
		possible because user accounts in a corporate directory are not granted permission to login to the LDAP
		server itself.
	-->
	<!--
	<bean id="authenticationProvider" class="org.opentravel.repocommon.security.impl.JNDIAuthenticationProvider">
		<property name="connectionUrl" value="ldap://localhost:389/dc=opentravel,dc=com" />
		<property name="securityAuthentication" value="simple" />
		<property name="connectionPrincipal" value="cn=Manager,dc=opentravel,dc=com" />
		<property name="connectionPassword" value="password" />
		<property name="userPattern" value="uid={0},ou=users,dc=opentravel,dc=com" />
	</bean>
	-->
	
	<!--
		Authentication Provider: (JNDI - User Lookup Mode)
		
		Authentication provider that implements JNDI authentication using user lookups.  In this mode, an
		authenticated user (typically an LDAP administrator) is used to establish all connections to the remote
		directory.  User accounts are identified by a distinguished name format that is the same for all users
		defined in the directory.  Once identified, encrypted password credentials are retrieved from the
		directory and compared with the credentials provided by the remote user of the repository.
	-->
	<!--
	<bean id="authenticationProvider" class="org.opentravel.repocommon.security.impl.JNDIAuthenticationProvider">
		<property name="connectionUrl" value="ldap://localhost:389/dc=opentravel,dc=com" />
		<property name="securityAuthentication" value="simple" />
		<property name="connectionPrincipal" value="cn=Manager,dc=opentravel,dc=com" />
		<property name="connectionPassword" value="password" />
		<property name="userPattern" value="uid={0},ou=users" />
		<property name="digestAlgorithm" value="SHA-1" />
	</bean>
	-->
	
	<!--
		Authentication Provider: (JNDI - User Search Mode)
		
		Authentication provider that implements JNDI authentication using user searches.  This mode of operation
		establishes remote connections using a single authenticated user account.  User accounts are located by
		searches within the directory using one or more configurable query strings.  Once user accounts are
		located by a search, the user's encrypted password credentials are retrieved from the directory and
		compared with the credentials provided by the remote user of the repository.
	-->
	<!--
	<bean id="authenticationProvider" class="org.opentravel.repocommon.security.impl.JNDIAuthenticationProvider">
		<property name="connectionUrl" value="ldap://localhost:389/dc=opentravel,dc=com" />
		<property name="securityAuthentication" value="simple" />
		<property name="connectionPrincipal" value="cn=Manager,dc=opentravel,dc=com" />
		<property name="connectionPassword" value="password" />
		<property name="userSearchBase" value="ou=users" />
		<property name="userSearchPatterns" value="(uid={0})" />
		<property name="digestAlgorithm" value="SHA-1" />
	</bean>
	-->
	
	<!--
		Authorization Provider:
		
		Provides information about which operations a particular user is authorized to perform on a namespace
		in the OTA2.0 repository.
	-->
	<bean id="authorizationProvider" class="org.opentravel.repocommon.security.impl.DefaultAuthorizationProvider">
		<constructor-arg ref="repositoryManager" />
	</bean>
	
	<!--
		SVN Configuration Folder:
		
		If SVN persistence is selected above for the repository manager, this bean indicates the file system location
		of the Subversion configuration folder.  Prior to launching the OTA2.0 repository web service, the SVN user
		configuration must contain locally-stored credentials for the SVN repository where the files are hosted.
	-->
	<bean id="svnConfigFolder" class="java.io.File" scope="singleton">
		<constructor-arg value="#{systemProperties['svn.configFolder']}" />
	</bean>
	<bean id="svnCredentialsFile" class="java.io.File" scope="singleton">
		<constructor-arg value="#{systemProperties['svn.credentialsFile']}" />
	</bean>
	
	<!--
		Indexing Service JMS Configuration:
		
		Optional configuration that defines the RabbitMQ connection factory and queues used to communicate with
		the free-text indexing service.
	-->
	<bean id="localJMSConnectionFactory" class="com.rabbitmq.jms.admin.RMQConnectionFactory">
		<property name="port" value="5672" />
	</bean>
	
	<bean id="indexingConnectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
		<property name="targetConnectionFactory" ref="localJMSConnectionFactory" />
		<property name="sessionCacheSize" value="10" />
	</bean>

	<bean id="indexingJobRequestQueue" class="com.rabbitmq.jms.admin.RMQDestination">
		<property name="destinationName" value="otm.indexing.jobRequestQueue" />
		<property name="amqp" value="true" />
	</bean>

	<bean id="indexingJobResponseQueue" class="com.rabbitmq.jms.admin.RMQDestination">
		<property name="destinationName" value="otm.indexing.jobResponseQueue" />
		<property name="amqp" value="true" />
	</bean>

	<bean id="indexingJmsService" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="indexingConnectionFactory" />
		<property name="receiveTimeout" value="500" />
	</bean>
	
	<!--
		Notification Service Configuration:
		
		Optional configuration that defines the implementation class for the notification service and the
		JMS connection factory and queues used to publish notification events.
		
		NOTE: The 'notificationJMSConnectionFactory' bean definition may change based upon the MQ provider to
		which notifications will be sent.  This example assumes an RabbitMQ provider running on localhost.
	-->
	<bean id="notificationService" class="org.opentravel.reposervice.notification.NoOpNotificationService" />
	
	<!--
		Subscription Manager Configuration:
		
		Configuration settings used for subscriptions and email notifications.
	-->
	<bean id="subscriptionManager" class="org.opentravel.repocommon.subscription.SubscriptionManager">
		<constructor-arg index="0" ref="repositoryManager" />
		<property name="baseRepositoryUrl" value="http://www.repohostname.com:8181/ota2-repository-service" />
		<property name="notificationDelay" value="1000" />
		<property name="smtpConfig">
			<bean class="org.opentravel.repocommon.subscription.SMTPConfig">
				<property name="smtpHost" value="smtp.example.com" />
				<property name="smtpPort" value="587" />
				<property name="smtpUser" value="user1" />
				<property name="smtpPassword" value="user1passwd" />
				<property name="timeout" value="5000" />
				<property name="sslEnable" value="false" />
				<property name="authEnable" value="false" />
				<property name="startTlsEnable" value="true" />
				<property name="senderAddress" value="user1@example.com" />
				<property name="senderName" value="User Smith" />
				<!--
				<property name="replyToAddress" value="replyToUser@example.com" />
				<property name="replyToName" value="Reply To User" />
				<property name="ccRecipients">
					<list>
						<value>user1@example.com</value>
						<value>user2@example.com</value>
						<value>user3@example.com</value>
					</list>
				</property>
				-->
			</bean>
		</property>
	</bean>
	
</beans>