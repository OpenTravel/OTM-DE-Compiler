<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

	<bean id="contextApplicationContextProvider" class="org.opentravel.schemacompiler.ioc.SchemaCompilerApplicationContext" />

	<!--
	 Library Access Controller
	 
	 Optional bean definitions that assigns the component that will handle access control permissions
	 for user-defined libraries.  Classes that are assigned to this bean ID must implement the
	 'org.opentravel.schemacompiler.security.LibraryAccessController' interface.
	 -->
	<bean id="libraryAccessController" class="org.opentravel.schemacompiler.security.impl.ProtectedNamespaceLibraryAccessController" />
	
	<!--
	  OTA Protected Namespace Group
	  
	  Defines the protected namespaces that are managed by the OTA staff, and the location of the
	  credentials used to verify the people who have write access to the libraries assigned to those
	  namespaces.
	  -->
	  
	<!-- Example definition  
	<bean id="otaProtectedNamespaceGroup" class="org.opentravel.schemacompiler.security.impl.DefaultProtectedNamespaceGroup">
		<property name="groupId" value="OTA" />
		<property name="groupTitle" value="OTA Namespaces" />
		<property name="credentialUrl" value="http://localhost/~user/otm-credentials.otc"/>
		<property name="protectedNamespaceUris">
			<list>
				<value>http://opentravel.org</value>
			</list>
		</property>
	</bean>
	 -->
	
	<!--
	  Schema Declarations
	  
	  The following schema declarations define the name, namespace, location, etc. of various XML schema
	  and OTA2 library documents that are required by the compiler.  While some of these libraries may be
	  visible externally (e.g. built-in libraries), others may only be required for internal usage by
	  the compiler.
	  -->
	  
	<bean id="ota2CommonSchema" class="org.opentravel.schemacompiler.ioc.SchemaDeclaration" scope="singleton">
		<property name="namespace" value="http://opentravel.org/common/v02" />
		<property name="name" value="OTA2_BuiltIns_v2.0.0" />
		<property name="defaultPrefix" value="ota2-dep" />
		<property name="location" value="classpath:/ota2-context/built-ins/OTA2_BuiltIns_v2.0.0.otm" />
	</bean>

	<bean id="ota2SimpleTypes" class="org.opentravel.schemacompiler.ioc.SchemaDeclaration" scope="singleton">
		<property name="namespace" value="http://www.opentravel.org/OTM/Common/v0" />
		<property name="name" value="OTA_SimpleTypes" />
		<property name="defaultPrefix" value="ota2" />
		<property name="location" value="classpath:/ota2-context/built-ins/OTA_SimpleTypes_0_0_0.otm" />
		<property name="importByDefault" value="true" />
	</bean>
	
	<bean id="ota2MessageSchema" class="org.opentravel.schemacompiler.ioc.SchemaDeclaration" scope="singleton">
		<property name="namespace" value="http://opentravel.org/common/message/v02" />
		<property name="name" value="OTA2_Message_v2.0.0" />
		<property name="defaultPrefix" value="ota2msg" />
		<property name="location" value="classpath:/ota2-context/built-ins/OTA2_Message_v2.0.0.xsd" />
		<property name="dependencies">
			<list>
				<value>ota2CommonSchema</value>
			</list>
		</property>
	</bean>
	
	<bean id="ota2LibrarySchema_1_4" class="org.opentravel.schemacompiler.ioc.SchemaDeclaration" scope="singleton">
		<property name="namespace" value="http://www.OpenTravel.org/ns/OTA2/LibraryModel_v01_04" />
		<property name="name" value="OTA2_LibraryModel_v1.4.7" />
		<property name="location" value="classpath:/ota2-context/schemas/OTA2_LibraryModel_v1.4.7.xsd" />
	</bean>
	
	<bean id="ota2LibrarySchema_1_5" class="org.opentravel.schemacompiler.ioc.SchemaDeclaration" scope="singleton">
		<property name="namespace" value="http://www.OpenTravel.org/ns/OTA2/LibraryModel_v01_05" />
		<property name="name" value="OTA2_LibraryModel_v1.5.0" />
		<property name="location" value="classpath:/ota2-context/schemas/OTA2_LibraryModel_v1.5.0.xsd" />
	</bean>
	
	<bean id="ota2ProjectSchema" class="org.opentravel.schemacompiler.ioc.SchemaDeclaration" scope="singleton">
		<property name="namespace" value="http://www.OpenTravel.org/ns/OTA2/Project_v01_00" />
		<property name="name" value="OTA2_Project_v1.0.0" />
		<property name="defaultPrefix" value="otp" />
		<property name="location" value="classpath:/ota2-context/schemas/OTA2_Project_v1.0.0.xsd" />
	</bean>
	
	<bean id="ota2RepositorySchema" class="org.opentravel.schemacompiler.ioc.SchemaDeclaration" scope="singleton">
		<property name="namespace" value="http://www.OpenTravel.org/ns/OTA2/RepositoryInfo_v01_00" />
		<property name="name" value="OTA2_Repository_v1.0.0" />
		<property name="defaultPrefix" value="otr" />
		<property name="location" value="classpath:/ota2-context/schemas/OTA2_Repository_v1.0.1.xsd" />
	</bean>
	
	<bean id="ota2CatalogSchema" class="org.opentravel.schemacompiler.ioc.SchemaDeclaration" scope="singleton">
		<property name="namespace" value="http://www.OpenTravel.org/ns/OTA2/LibraryCatalog_v01_00" />
		<property name="name" value="OTA2_LibraryCatalog_v1.0.0" />
		<property name="location" value="classpath:/ota2-context/schemas/OTA2_LibraryCatalog_v1.0.0.xsd" />
	</bean>
	
	<bean id="wsdlSchema" class="org.opentravel.schemacompiler.ioc.SchemaDeclaration" scope="singleton">
		<property name="namespace" value="http://schemas.xmlsoap.org/wsdl/" />
		<property name="name" value="wsdl" />
		<property name="defaultPrefix" value="wsdl" />
		<property name="location" value="classpath:/ota2-context/schemas/wsdl.xsd" />
	</bean>
	
	<bean id="soapSchema" class="org.opentravel.schemacompiler.ioc.SchemaDeclaration" scope="singleton">
		<property name="namespace" value="http://schemas.xmlsoap.org/wsdl/soap/" />
		<property name="name" value="soap" />
		<property name="defaultPrefix" value="soap" />
		<property name="location" value="classpath:/ota2-context/schemas/soap.xsd" />
	</bean>
	
	<bean id="schemaForSchemas" class="org.opentravel.schemacompiler.ioc.SchemaDeclaration" scope="singleton">
		<property name="namespace" value="http://www.w3.org/2001/XMLSchema" />
		<property name="name" value="XMLSchema" />
		<property name="defaultPrefix" value="xsd" />
		<property name="location" value="classpath:/ota2-context/schemas/XMLSchemaForSchemas.xsd" />
	</bean>
	
	<bean id="xmlSchema" class="org.opentravel.schemacompiler.ioc.SchemaDeclaration" scope="singleton">
		<property name="namespace" value="http://www.w3.org/2001/XMLSchema" />
		<property name="name" value="XMLSchema" />
		<property name="defaultPrefix" value="xsd" />
		<property name="location" value="classpath:/ota2-context/schemas/xml.xsd" />
	</bean>
	
	<bean id="ota2AppInfoSchema" class="org.opentravel.schemacompiler.ioc.SchemaDeclaration" scope="singleton">
		<property name="namespace" value="http://www.OpenTravel.org/ns/OTA2/AppInfo_v01_00" />
		<property name="name" value="OTA2_AppInfo_v1.0.0" />
		<property name="defaultPrefix" value="otm" />
		<property name="location" value="classpath:/ota2-context/schemas/OTA2_AppInfo_v1.0.0.xsd" />
	</bean>
	
	<!--
	  Validation Rule Set: Compile (default)
	  
	  Defines the default set of validator classes that should be used to perform validation of OTA2 model components prior to
	  compilation by a code generator.  If errors are reported during compile validation, code generation will not be attempted
	  (warnings are allowed) .All validation target types must implement the 'org.opentravel.schemacompiler.validate.Validatable'
	  interface, and all validator classes must implement the 'org.opentravel.schemacompiler.validate.Validator' interface.
	  -->
	<bean id="defaultCompileValidationRules" class="org.opentravel.schemacompiler.validate.ValidationRuleSet" scope="prototype">
		<property name="validatorMappings">
			<list>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLAlias" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLAliasCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLAttribute" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLAttributeCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLBusinessObject" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLBusinessObjectCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLClosedEnumeration" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLClosedEnumerationCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLContext" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLContextCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLCoreObject" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLCoreObjectCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLChoiceObject" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLChoiceObjectCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLDocumentation" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLDocumentationCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLEnumValue" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLEnumValueCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLEquivalent" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLEquivalentCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLExample" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLExampleCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLExtension" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLExtensionCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLExtensionPointFacet" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLExtensionPointFacetCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLFacet" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLFacetCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLInclude" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLIncludeCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLIndicator" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLIndicatorCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLLibrary" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLLibraryCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLOpenEnumeration" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLOpenEnumerationCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLOperation" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLOperationCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLProperty" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLPropertyCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLRole" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLRoleCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLService" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLServiceCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLSimpleFacet" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLSimpleFacetCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLSimple" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLSimpleCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLValueWithAttributes" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLValueWithAttributesCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLResource" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLResourceCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLResourceParentRef" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLResourceParentRefCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLParamGroup" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLParamGroupCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLParameter" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLParameterCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLActionFacet" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLActionFacetCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLAction" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLActionCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLActionRequest" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLActionRequestCompileValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLActionResponse" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.compile.TLActionResponseCompileValidator" />
				</bean>
			</list>
		</property>
	</bean>

	<!--
	  Validation Rule Set: Save (default)
	  
	  Defines the validator classes that should be used to perform validation of OTA2 model components prior to marshalling
	  by the Library Model Saver.  Validations for file-saves are less rigorous than those that are performed prior to compilation
	  and typically focus on conformance with the library's XML file format.  All validation target types must implement the
	  'org.opentravel.schemacompiler.validate.Validatable' interface, and all validator classes must implement the
	  'org.opentravel.schemacompiler.validate.Validator' interface.
	  -->
	<bean id="defaultSaveValidationRules" class="org.opentravel.schemacompiler.validate.ValidationRuleSet" scope="prototype">
		<property name="validatorMappings">
			<list>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLAlias" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLAliasSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLAttribute" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLAttributeSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLBusinessObject" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLBusinessObjectSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLClosedEnumeration" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLClosedEnumerationSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLContext" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLContextSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLCoreObject" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLCoreObjectSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLChoiceObject" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLChoiceObjectSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLDocumentation" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLDocumentationSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLEnumValue" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLEnumValueSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLEquivalent" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLEquivalentSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLExample" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLExampleSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLExtension" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLExtensionSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLExtensionPointFacet" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLExtensionPointFacetSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLFacet" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLFacetSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLInclude" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLIncludeSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLIndicator" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLIndicatorSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLLibrary" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLLibrarySaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLOpenEnumeration" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLOpenEnumerationSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLOperation" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLOperationSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLProperty" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLPropertySaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLRole" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLRoleSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLService" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLServiceSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLSimpleFacet" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLSimpleFacetSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLSimple" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLSimpleSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLValueWithAttributes" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLValueWithAttributesSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLResource" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLResourceSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLResourceParentRef" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLResourceParentRefSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLParamGroup" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLParamGroupSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLParameter" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLParameterSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLActionFacet" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLActionFacetSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLAction" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLActionSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLActionRequest" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLActionRequestSaveValidator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.validate.ValidatorMapping">
					<property name="targetClass" value="org.opentravel.schemacompiler.model.TLActionResponse" />
					<property name="validatorClass" value="org.opentravel.schemacompiler.validate.save.TLActionResponseSaveValidator" />
				</bean>
			</list>
		</property>
	</bean>

	<!--
	  Transform Factory: Library Model Loader
	  
	  Defines the object transformation mappings utilized by the Library Model Loader to marshall from XML file/stream
	  content to an in-memory library instance.  Each mapping associates the source and target object types with the
	  transformer class that will be used to implement the conversion function.  All transformer classes must implement
	  the 'org.opentravel.schemacompiler.transform.ObjectTransformer' interface.
	  -->
	<bean id="symbolTableFactory" class="org.opentravel.schemacompiler.transform.symbols.SymbolTableFactory" scope="singleton">
		<property name="symbolTablePopulators">
			<list>
				<bean class="org.opentravel.schemacompiler.transform.symbols.TLModelSymbolTablePopulator" />
				<bean class="org.opentravel.schemacompiler.transform.symbols.TLLibrarySymbolTablePopulator" />
				<bean class="org.opentravel.schemacompiler.transform.jaxb2xsd.LegacySchemaSymbolTablePopulator" />
			</list>
		</property>
	</bean>
	
	<!--
	  Transform Factory: Library Model Loader
	  
	  Defines the object transformation mappings utilized by the Library Model Loader to marshall from XML file/stream
	  content to an in-memory library instance.  Each mapping associates the source and target object types with the
	  transformer class that will be used to implement the conversion function.  All transformer classes must implement
	  the 'org.opentravel.schemacompiler.transform.ObjectTransformer' interface.
	  -->
	<bean id="loaderTransformFactory" class="org.opentravel.schemacompiler.transform.TransformerFactory" scope="prototype">
		<property name="transformerMappings">
			<set>
				<!-- Library v1.4 Transformers -->
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.Attribute" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLAttribute" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.AttributeTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.BusinessObject" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLBusinessObject" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.BusinessObjectTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.EnumerationClosed" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLClosedEnumeration" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.EnumerationClosedTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.ContextDeclaration" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLContext" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.ContextDeclarationTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.CoreObject" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLCoreObject" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.CoreObjectTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.Documentation" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLDocumentation" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.DocumentationTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.EnumValue" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLEnumValue" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.EnumValueTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.Equivalent" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLEquivalent" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.EquivalentTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.Example" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLExample" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.ExampleTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.Extension" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLExtension" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.ExtensionTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.ExtensionPointFacet" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLExtensionPointFacet" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.ExtensionPointFacetTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.Facet" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLFacet" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.FacetTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.FacetContextual" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLFacet" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.FacetContextualTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.Indicator" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLIndicator" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.IndicatorTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.Library" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLLibrary" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.LibraryTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.EnumerationOpen" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLOpenEnumeration" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.EnumerationOpenTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.Operation" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLOperation" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.OperationTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.Property" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLProperty" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.PropertyTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.Role" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLRole" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.RoleTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.Service" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLService" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.ServiceTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.SimpleFacet" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLSimpleFacet" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.SimpleFacetTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.Simple" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLSimple" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.SimpleTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_04.ValueWithAttributes" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLValueWithAttributes" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb14_2tl.ValueWithAttributesTransformer" />
				</bean>
				
				<!-- Library v1.5 Transformers -->
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.Attribute" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLAttribute" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.AttributeTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.BusinessObject" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLBusinessObject" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.BusinessObjectTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.EnumerationClosed" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLClosedEnumeration" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.EnumerationClosedTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.ContextDeclaration" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLContext" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.ContextDeclarationTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.ChoiceObject" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLChoiceObject" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.ChoiceObjectTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.CoreObject" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLCoreObject" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.CoreObjectTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.Documentation" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLDocumentation" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.DocumentationTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.EnumValue" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLEnumValue" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.EnumValueTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.Equivalent" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLEquivalent" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.EquivalentTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.Example" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLExample" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.ExampleTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.Extension" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLExtension" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.ExtensionTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.ExtensionPointFacet" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLExtensionPointFacet" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.ExtensionPointFacetTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.Facet" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLFacet" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.FacetTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.FacetContextual" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLFacet" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.FacetContextualTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.Indicator" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLIndicator" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.IndicatorTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.Library" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLLibrary" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.LibraryTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.EnumerationOpen" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLOpenEnumeration" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.EnumerationOpenTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.Operation" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLOperation" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.OperationTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.Property" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLProperty" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.PropertyTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.Role" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLRole" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.RoleTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.Service" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLService" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.ServiceTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.SimpleFacet" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLSimpleFacet" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.SimpleFacetTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.Simple" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLSimple" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.SimpleTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.ValueWithAttributes" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLValueWithAttributes" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.ValueWithAttributesTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.Resource" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLResource" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.ResourceTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.ResourceParentRef" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLResourceParentRef" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.ResourceParentRefTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.ParamGroup" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLParamGroup" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.ParamGroupTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.Parameter" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLParameter" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.ParameterTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.FacetAction" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLActionFacet" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.FacetActionTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.Action" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLAction" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.ActionTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.ActionRequest" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLActionRequest" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.ActionRequestTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.ns.ota2.librarymodel_v01_05.ActionResponse" />
					<property name="target" value="org.opentravel.schemacompiler.model.TLActionResponse" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb15_2tl.ActionResponseTransformer" />
				</bean>
				
				<!-- Legacy Schema Transformers -->
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.w3._2001.xmlschema.TopLevelComplexType" />
					<property name="target" value="org.opentravel.schemacompiler.model.XSDComplexType" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb2xsd.TopLevelComplexTypeTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.w3._2001.xmlschema.TopLevelElement" />
					<property name="target" value="org.opentravel.schemacompiler.model.XSDElement" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb2xsd.TopLevelElementTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.w3._2001.xmlschema.Schema" />
					<property name="target" value="org.opentravel.schemacompiler.model.XSDLibrary" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb2xsd.SchemaTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.w3._2001.xmlschema.TopLevelSimpleType" />
					<property name="target" value="org.opentravel.schemacompiler.model.XSDSimpleType" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.jaxb2xsd.TopLevelSimpleTypeTransformer" />
				</bean>
				
			</set>
		</property>
	</bean>
	
	<!--
	  Transform Factory: Library Model Saver
	  
	  Defines the object transformation mappings utilized by the Library Model Saver to marshall from in-memory
	  library content to an output.  Each mapping associates the source and target object types with the transformer
	  class that will be used to implement the conversion function.  All transformer classes must implement the
	  'org.opentravel.schemacompiler.transform.ObjectTransformer' interface.
	  -->
	<bean id="saverTransformFactory" class="org.opentravel.schemacompiler.transform.TransformerFactory" scope="prototype">
		<property name="transformerMappings">
			<set>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLAttribute" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.Attribute" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLAttributeTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLBusinessObject" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.BusinessObject" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLBusinessObjectTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLClosedEnumeration" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.EnumerationClosed" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLClosedEnumerationTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLContext" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.ContextDeclaration" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLContextTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLChoiceObject" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.ChoiceObject" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLChoiceObjectTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLCoreObject" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.CoreObject" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLCoreObjectTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLDocumentation" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.Documentation" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLDocumentationTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLEnumValue" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.EnumValue" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLEnumValueTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLEquivalent" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.Equivalent" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLEquivalentTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLExample" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.Example" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLExampleTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLExtension" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.Extension" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLExtensionTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLExtensionPointFacet" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.ExtensionPointFacet" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLExtensionPointFacetTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLFacet" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.Facet" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLFacetTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLFacet" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.FacetContextual" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLFacetToContextualFacetTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLIndicator" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.Indicator" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLIndicatorTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLLibrary" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.Library" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLLibraryTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLOpenEnumeration" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.EnumerationOpen" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLOpenEnumerationTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLOperation" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.Operation" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLOperationTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLProperty" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.Property" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLPropertyTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLRole" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.Role" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLRoleTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLService" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.Service" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLServiceTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLSimpleFacet" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.SimpleFacet" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLSimpleFacetTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLSimple" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.Simple" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLSimpleTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLValueWithAttributes" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.ValueWithAttributes" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLValueWithAttributesTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLResource" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.Resource" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLResourceTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLResourceParentRef" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.ResourceParentRef" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLResourceParentRefTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLParamGroup" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.ParamGroup" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLParamGroupTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLParameter" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.Parameter" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLParameterTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLActionFacet" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.FacetAction" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLActionFacetTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLAction" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.Action" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLActionTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLActionRequest" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.ActionRequest" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLActionRequestTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLActionResponse" />
					<property name="target" value="org.opentravel.ns.ota2.librarymodel_v01_05.ActionResponse" />
					<property name="transformer" value="org.opentravel.schemacompiler.transform.tl2jaxb.TLActionResponseTransformer" />
				</bean>
			</set>
		</property>
	</bean>
	
	<!--
	  System-ID Mappings
	  
	  During XML parsing, these System-ID mappings are used to handle indirect imports and includes
	  that are required to fully resolve all symbols referenced by the XML parser.  The keys of this
	  map should indicate the filename (as referenced in the import/include element) and the values
	  should match one of the schema declaration ID's defined above.
	  -->
	<bean id="systemIdMappings" class="java.util.HashMap">
		<constructor-arg>
			<map>
				<entry key="xml.xsd" value-ref="xmlSchema" />
			</map>
		</constructor-arg>
	</bean>
	
	<!--
	  Resource Bundle: Compiler Error/Warning Messages
	  
	  Defines the name of the resource bundle(s) where all of the user-displayable validation messages
	  are defined.
	  -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>org/opentravel/schemacompiler/compiler-messages</value>
			</list>
		</property>
	</bean>
	
	<!--
	  Version Scheme Factory
	  
	  Defines the set of version schemes that are supported by the OTA2 compiler.  A version scheme defines
	  the contract for the encoding and management of version identifiers as part of an encoded namespace URI.
	  All version scheme classes must implement the 'org.opentravel.schemacompiler.version.VersionScheme' interface.
	  -->
	<bean id="versionSchemeFactory" class="org.opentravel.schemacompiler.version.VersionSchemeFactory">
		<property name="versionSchemeMappings">
			<props>
				<prop key="OTA2">org.opentravel.schemacompiler.version.OTA2VersionScheme</prop>
				<prop key="XSD">org.opentravel.schemacompiler.version.XSDVersionScheme</prop>
			</props>
		</property>
		<property name="defaultVersionScheme" value="OTA2" />
	</bean>
	
	<!--
	  Protected Namespace Registry
	  
	  Defines the list of protected namespace groupings that will be write-protected by the schema compiler's
	  security functions.
	  -->
	<bean id="protectedNamespaceRegistry" class="org.opentravel.schemacompiler.security.impl.DefaultProtectedNamespaceRegistry" scope="singleton">
		<property name="protectedNamespaces">
			<list>
				<!--
				<ref bean="otaProtectedNamespaceGroup" />
				-->
			</list>
		</property>
	</bean>
	
	
	<!--
	  Code Generation Tasks
	  
	  Defines the beans that are available as pre-configured code generation tasks.
	  -->
	<bean id="SchemaCompilerTask" class="org.opentravel.schemacompiler.task.SchemaCompilerTask" scope="prototype">
		<property name="validationRuleSetId" value="defaultCompileValidationRules" />
	</bean>
	<bean id="ServiceCompilerTask" class="org.opentravel.schemacompiler.task.ServiceCompilerTask" scope="prototype">
		<property name="validationRuleSetId" value="defaultCompileValidationRules" />
	</bean>
	<bean id="CompileAllCompilerTask" class="org.opentravel.schemacompiler.task.CompileAllCompilerTask" scope="prototype">
		<property name="validationRuleSetId" value="defaultCompileValidationRules" />
	</bean>
	
	<!--
	  Code Generator Factory (Base Factory)
	  
	  Defines the set of supported code generators for the OTA2 compiler.  Each code generator class is associated
	  with a unique target format / source type combination.  Target formats are simple string identifiers that denote
	  the output format of the code generator.  Source types are the class names of an OTA2 library model class.  All
	  code generator classes must implement the 'org.opentravel.schemacompiler.codegen.CodeGenerator' interface.
	  -->
	<bean id="baseCodeGeneratorFactory" class="org.opentravel.schemacompiler.codegen.CodeGeneratorFactory">
		<property name="codeGeneratorMappings">
			<set>
				<bean class="org.opentravel.schemacompiler.codegen.CodeGeneratorMapping">
					<property name="sourceType" value="org.opentravel.schemacompiler.model.TLLibrary" />
					<property name="targetFormat" value="XSD" />
					<property name="codeGenerator" value="org.opentravel.schemacompiler.codegen.xsd.XsdUserLibraryCodeGenerator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.codegen.CodeGeneratorMapping">
					<property name="sourceType" value="org.opentravel.schemacompiler.model.XSDLibrary" />
					<property name="targetFormat" value="XSD" />
					<property name="codeGenerator" value="org.opentravel.schemacompiler.codegen.xsd.XsdLegacySchemaCodeGenerator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.codegen.CodeGeneratorMapping">
					<property name="sourceType" value="org.opentravel.schemacompiler.model.XSDLibrary" />
					<property name="targetFormat" value="EXT_XSD" />
					<property name="codeGenerator" value="org.opentravel.schemacompiler.codegen.xsd.XsdExtensionSchemaCodeGenerator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.codegen.CodeGeneratorMapping">
					<property name="sourceType" value="org.opentravel.schemacompiler.model.BuiltInLibrary" />
					<property name="targetFormat" value="XSD" />
					<property name="codeGenerator" value="org.opentravel.schemacompiler.codegen.xsd.XsdBuiltInCodeGenerator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.codegen.CodeGeneratorMapping">
					<property name="sourceType" value="org.opentravel.schemacompiler.model.TLBusinessObject" />
					<property name="targetFormat" value="RASXSD" />
					<property name="codeGenerator" value="org.opentravel.schemacompiler.codegen.xsd.XsdRASCodeGenerator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.codegen.CodeGeneratorMapping">
					<property name="sourceType" value="org.opentravel.schemacompiler.model.TLBusinessObject" />
					<property name="targetFormat" value="WSDL" />
					<property name="codeGenerator" value="org.opentravel.schemacompiler.codegen.wsdl.WsdlLibraryMemberCodeGenerator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.codegen.CodeGeneratorMapping">
					<property name="sourceType" value="org.opentravel.schemacompiler.model.TLService" />
					<property name="targetFormat" value="WSDL" />
					<property name="codeGenerator" value="org.opentravel.schemacompiler.codegen.wsdl.WsdlLibraryMemberCodeGenerator" />
				</bean>
				<bean class="org.opentravel.schemacompiler.codegen.CodeGeneratorMapping">
					<property name="sourceType" value="org.opentravel.schemacompiler.model.TLModelElement" />
					<property name="targetFormat" value="XML" />
					<property name="codeGenerator" value="org.opentravel.schemacompiler.codegen.example.ExampleCodeGenerator" />
				</bean>
			</set>
		</property>
	</bean>
	
	<!--
	  Transform Factory: XML Schema (XSD) Code Generator
	  
	  Defines the object transformation mappings utilized by the XML schema code generator.  Each mapping associates
	  the source and target object types with the transformer class that will be used to implement the conversion
	  function.  All transformer classes must implement the 'org.opentravel.schemacompiler.transform.ObjectTransformer'
	  interface.
	  -->
	<bean id="xsdCodeGeneratorTransformFactory" class="org.opentravel.schemacompiler.transform.TransformerFactory" scope="prototype">
		<property name="transformerMappings">
			<set>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLAttribute" />
					<property name="target" value="org.opentravel.schemacompiler.codegen.impl.CodegenArtifacts" />
					<property name="transformer" value="org.opentravel.schemacompiler.codegen.xsd.TLAttributeCodegenTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLBusinessObject" />
					<property name="target" value="org.opentravel.schemacompiler.codegen.impl.CodegenArtifacts" />
					<property name="transformer" value="org.opentravel.schemacompiler.codegen.xsd.TLBusinessObjectCodegenTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLClosedEnumeration" />
					<property name="target" value="org.opentravel.schemacompiler.codegen.impl.CodegenArtifacts" />
					<property name="transformer" value="org.opentravel.schemacompiler.codegen.xsd.TLClosedEnumerationCodegenTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLCoreObject" />
					<property name="target" value="org.opentravel.schemacompiler.codegen.impl.CodegenArtifacts" />
					<property name="transformer" value="org.opentravel.schemacompiler.codegen.xsd.TLCoreObjectCodegenTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLDocumentation" />
					<property name="target" value="org.w3._2001.xmlschema.Annotation" />
					<property name="transformer" value="org.opentravel.schemacompiler.codegen.xsd.TLDocumentationCodegenTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLExtensionPointFacet" />
					<property name="target" value="org.opentravel.schemacompiler.codegen.impl.CodegenArtifacts" />
					<property name="transformer" value="org.opentravel.schemacompiler.codegen.xsd.TLExtensionPointFacetCodegenTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLIndicator" />
					<property name="target" value="org.w3._2001.xmlschema.Annotated" />
					<property name="transformer" value="org.opentravel.schemacompiler.codegen.xsd.TLIndicatorCodegenTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLLibrary" />
					<property name="target" value="org.w3._2001.xmlschema.Schema" />
					<property name="transformer" value="org.opentravel.schemacompiler.codegen.xsd.TLLibraryCodegenTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.BuiltInLibrary" />
					<property name="target" value="org.w3._2001.xmlschema.Schema" />
					<property name="transformer" value="org.opentravel.schemacompiler.codegen.xsd.BuiltInLibraryCodegenTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLOpenEnumeration" />
					<property name="target" value="org.opentravel.schemacompiler.codegen.impl.CodegenArtifacts" />
					<property name="transformer" value="org.opentravel.schemacompiler.codegen.xsd.TLOpenEnumerationCodegenTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLOperation" />
					<property name="target" value="org.opentravel.schemacompiler.codegen.impl.CodegenArtifacts" />
					<property name="transformer" value="org.opentravel.schemacompiler.codegen.xsd.TLOperationCodegenTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLProperty" />
					<property name="target" value="org.w3._2001.xmlschema.TopLevelElement" />
					<property name="transformer" value="org.opentravel.schemacompiler.codegen.xsd.TLPropertyCodegenTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLService" />
					<property name="target" value="org.opentravel.schemacompiler.codegen.impl.CodegenArtifacts" />
					<property name="transformer" value="org.opentravel.schemacompiler.codegen.xsd.TLServiceCodegenTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLSimple" />
					<property name="target" value="org.opentravel.schemacompiler.codegen.impl.CodegenArtifacts" />
					<property name="transformer" value="org.opentravel.schemacompiler.codegen.xsd.TLSimpleCodegenTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLValueWithAttributes" />
					<property name="target" value="org.opentravel.schemacompiler.codegen.impl.CodegenArtifacts" />
					<property name="transformer" value="org.opentravel.schemacompiler.codegen.xsd.TLValueWithAttributesCodegenTransformer" />
				</bean>
			</set>
		</property>
	</bean>
	
	<!--
	  Transform Factory: WSDL Code Generator
	  
	  Defines the object transformation mappings utilized by the WSDL code generator.  Each mapping associates
	  the source and target object types with the transformer class that will be used to implement the conversion
	  function.  All transformer classes must implement the 'org.opentravel.schemacompiler.transform.ObjectTransformer'
	  interface.
	  -->
	<bean id="wsdlCodeGeneratorTransformFactory" class="org.opentravel.schemacompiler.transform.TransformerFactory" scope="prototype">
		<property name="transformerMappings">
			<set>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLBusinessObject" />
					<property name="target" value="javax.xml.bind.JAXBElement" />
					<property name="transformer" value="org.opentravel.schemacompiler.codegen.wsdl.TLBusinessObjectCodegenTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLOperation" />
					<property name="target" value="org.opentravel.schemacompiler.codegen.impl.CodegenArtifacts" />
					<property name="transformer" value="org.opentravel.schemacompiler.codegen.wsdl.TLOperationCodegenTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLService" />
					<property name="target" value="javax.xml.bind.JAXBElement" />
					<property name="transformer" value="org.opentravel.schemacompiler.codegen.wsdl.TLServiceCodegenTransformer" />
				</bean>
				<bean class="org.opentravel.schemacompiler.transform.TransformerMapping">
					<property name="source" value="org.opentravel.schemacompiler.model.TLDocumentation" />
					<property name="target" value="org.xmlsoap.schemas.wsdl.TDocumentation" />
					<property name="transformer" value="org.opentravel.schemacompiler.codegen.wsdl.TLDocumentationWsdlCodegenTransformer" />
				</bean>
			</set>
		</property>
	</bean>
	
	
	<bean id="exampleGenerator" class="org.opentravel.schemacompiler.codegen.example.ExampleValueGenerator" scope="prototype">
 		<property name="legacyExampleProviders">
 			<list>
 				<!--
 				<bean class="org.opentravel.schemacompiler.codegen.example.LegacyTypeExampleProvider">
 					<constructor-arg value="/ota2-context/built-ins/OTA2_Message-example.properties" />
 				</bean>
 				-->
 			</list>
 		</property>
 	</bean>
	
	
	
</beans>